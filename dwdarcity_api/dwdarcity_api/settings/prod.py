"""
Django settings for dwdarcity_api project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import sys
import os.path
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 把apps目录下的所有子应用设置为可以直接导包，那就把apps设置默认到导包路径
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-jn)9d5xo06d!g55&=zvxa-a&%(xf8)=33e5y(@3ak6o8$(2rk('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'corsheaders',
    'rest_framework',
    'django_filters',  # 筛选
    'ckeditor',  # 富文本编辑器
    'ckeditor_uploader',  # 富文本编辑器图片上传模块
    # 子应用
    'home',
    'user',
    'course',
    'cart',
    'order',
    'coupon',
    'payments',
]

# CORS组的配置信息
CORS_ORIGIN_WHITELIST = (
    # 如果不行，可以填加协议 http://www.dwdarcity.cn:808
    # 'http://www.dwdarcity.cn:8080',
    "http://124.222.11.11",
)
CORS_ALLOW_CREDENTIALS = False  # 允许ajax跨域请求时携带cookie

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dwdarcity_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dwdarcity_api.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': '124.222.11.11',
        'PORT': 3306,
        'USER': 'root',
        'PASSWORD': '123456',
        'NAME': 'dwdarcity',
    }
}

# 设置redis缓存
CACHES = {
    # 默认缓存
    "default": {
        # 存储
        "BACKEND": "django_redis.cache.RedisCache",
        # 项目上线时,需要调整这里的路径
        "LOCATION": "redis://124.222.11.11:6379/0",
        # 客户端
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 提供给xadmin或者admin的session存储
    "session": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://124.222.11.11:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 提供存储短信验证码
    "sms_code": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://124.222.11.11:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 提供存储邮箱验证
    "mail_code": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://124.222.11.11:6379/3",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 存储购物车商品信息
    "cart": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://124.222.11.11:6379/4",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# 设置xadmin用户登录时,登录信息session保存到redis
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },

]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# 访问静态文件的url地址前缀
STATIC_URL = '/static/'
# 设置django的静态文件目录
STATICFILES_DIRS = [
    # os.path.join(BASE_DIR, "static")
]

# 静态收集目录，项目的根目录下
STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'static')

# 项目中存储上传文件的根目录[暂时配置]，注意，uploads目录需要手动创建否则上传文件时报错
MEDIA_ROOT = os.path.join(BASE_DIR, "uploads")
# 访问上传文件的url地址前缀
MEDIA_URL = "/media/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 日志管理
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            # 日志位置,日志文件名,日志保存目录必须手动创建
            'filename': os.path.join(os.path.dirname(BASE_DIR), "logs/dwdarcity.log"),
            # 日志文件的最大值,这里我们设置300M
            'maxBytes': 300 * 1024 * 1024,
            # 日志文件的数量,设置最大日志数量为10
            'backupCount': 10,
            # 日志格式:详细格式
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'propagate': True,  # 让日志信息继续冒泡给其他日志处理系统
        }
    }
}

# 异常处理
REST_FRAMEWORK = {
    # 异常处理
    'EXCEPTION_HANDLER': 'dwdarcity_api.utils.exceptions.custom_exception_handler',
    # jwt 登录认证
    # import rest_framework_jwt.authentication.JSONWebTokenAuthentication
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}

import datetime

JWT_AUTH = {
    # 设置jwt有效期
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
    # 设置自定义返回数据设置
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'user.utils.jwt_response_payload_handler',
}

# 实现多条件判断登录
AUTHENTICATION_BACKENDS = [
    'user.utils.UsernameMobileAuthBackend',
]

# superuser root   123
# 注册自定义用户模型,值的格式必须是： “应用名.模型类名”
AUTH_USER_MODEL = 'user.User'

# 短信接口的配置
SMS = {
    # 说明：主账号，登陆云通讯网站后，可在"控制台-应用"中看到开发者主账号ACCOUNT SID
    "_accountSid": "8aaf07087f77bf96017fb50272b21a73",
    # 说明：主账号Token，登陆云通讯网站后，可在控制台-应用中看到开发者主账号AUTH TOKEN
    "_accountToken": "0afc16e6735c4e7d9cd1d4d89969b0c5",
    # 请使用管理控制台首页的APPID或自己创建应用的APPID
    "_appId": "8aaf07087f77bf96017fb50273a71a7a",
    # 说明：请求地址，生产环境配置成app.cloopen.com
    # 沙箱环境地址: sandboxapp.cloopen.com
    "_serverIP": "sandboxapp.cloopen.com",
    # 说明：请求端口 ，生产环境为8883
    "_serverPort": "8883"
}

# 163邮箱授权码：
# VWCQWABRFRWCWDKM

# 邮件服务器配置
EMAIL_HOST = 'smtp.163.com'  # 如果是 163 改成 smtp.163.com
EMAIL_PORT = 465
EMAIL_HOST_USER = 'dwdar@163.com'  # 在这里填入您的QQ邮箱账号
EMAIL_HOST_PASSWORD = 'VWCQWABRFRWCWDKM'  # 请在这里填上您自己邮箱的授权码
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
EMAIL_USE_SSL = True

# 富文本编辑器ckeditor配置
CKEDITOR_CONFIGS = {
    'default': {
        # 'toolbar': 'Custom',
        'toolbar': 'Custom',
        'toolbar_Custom': [
            # ck_button_工具名称 [改成首字母大写(驼峰式写进来)]
            ['Bold', 'Italic', 'Underline'],
            ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'JustifyLeft', 'JustifyCenter',
             'JustifyRight', 'JustifyBlock'],
            ['Link', 'Unlink', 'Image'],
            ['RemoveFormat', 'Source']
        ],
        'height': 300,  # 编辑器高度
    }
}

CKEDITOR_UPLOAD_PATH = "uploads/"

# 支付宝配置信息
ALIPAY_CONFIG = {
    # "gateway_url":"https://openapi.alipay.com/gateway.do", # 真实环境支付宝网关地址
    "gateway_url": "https://openapi.alipaydev.com/gateway.do",  # 沙箱环境支付宝网关地址
    "appid": "2021000119681983",  # 应用ID
    "app_notify_url": None,  # 应用回调地址[支付成功以后,支付宝返回结果到哪一个地址下面]
    "app_private_key_path": os.path.join(BASE_DIR, "apps/payments/keys/app_private_key.pem"),
    "alipay_public_key_path": os.path.join(BASE_DIR, "apps/payments/keys/alipay_public_key.pem"),
    "sign_type": "RSA2",
    "debug": False,
    "return_url": "http://124.222.11.11:80/payments/alipay/result",  # 同步回调地址
    "notify_url": "http://124.222.11.11:80/payments/alipay/result",  # 支付宝异步结果通知
}

# 保利威视频加密服务
POLYV_CONFIG = {
    "userId": "123d56b2b5",
    "secretkey": "XFTIhxcrrh",
    "tokenUrl": "https://hls.videocc.net/service/v1/token"
}
